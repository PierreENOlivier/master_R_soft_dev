---
title: "Module 1 - Functions"
author: "Pierre Olivier"
format: html
editor: visual
---

# Advanced R - Module 1 - Functions

## Swirl sessions

```{r}
# install.packages("swirl")
library(swirl)
install_course("Advanced R Programming")
```

To get started

```{r}
swirl()
# skip()
# play() + nxt()
# bye()
# main()
# info()
# 
```

[Swirl Token for Advanced R Prog.](https://www.coursera.org/learn/advanced-r/programming/5TmEw/swirl-lesson)

### Swirl - Functions

Reusable piece of code

```{r}
Sys.Date()
```

Most functions return a value based on the environment. Some functions manipulate an input (i.e. argument) and return an output. Pass the argument to the function:

```{r}
mean(c(2, 4, 5))
```

Arguments are variables that the function operates on.

Exercise: Modify the script and type submit()

```{r}
boring_function <- function(x) {
  x
}

```

```{r}
boring_function('My first function!')
```

In R: 1. Everything that exists is an object. 2. Everything that happens is a function call.

See the source code:

```{r}
boring_function
```

```{r}
my_mean <- function(my_vector) {
  sum_vector <- sum(my_vector)
  sum_vector / length(my_vector)
}


```

```{r}
my_mean(c(4, 5, 10))
```

#### Arguments

Default arguments:

```{r}
increment <- function(number, by = 1){
    number + by
}

```

```{r}
remainder <- function(num, divisor = 2) {
    num %% divisor

}

remainder(5)
```

When not designated specifically, arguments are matched by order. To make sure, designate by their name.

```{r}
remainder(11, 5)
remainder(divisor = 11, num = 5)

```

R can also partially match arguments.

```{r}
remainder(4, div = 2)

```

A word of warning: in general you want to make your code as easy to understand as possible. Switching around the orders of arguments by specifying their names or only using partial argument names can be confusing, so use these features with caution!

You can view a function's arguments:

```{r}
args(remainder)

```

#### Passing functions to a function

We just passed a function as an argument. Functions are objects that can be passed.

```{r}
add_two_numbers <- function(num1, num2){
   num1 + num2
}

multiply_two_numbers <- function(num1, num2){
    num1 * num2
}

some_function <- function(func){
   func(2, 4)
}

```

```{r}
some_function(add_two_numbers)
```

Finish the function definition below so that if a function is passed into the "func" argument and some data (like a vector) is passed into the dat argument the evaluate() function will return the result of dat being passed as an argument to func.

evaluate \<- function(func, dat){ \# }

```{r}
evaluate <- function(func, dat){
    func(dat)
}

```

```{r}
evaluate(sum, c(2, 4, 6)) # 12
evaluate(median, c(7, 40, 9)) # 9
evaluate(floor, 11.1) # 11

```

```{r}

evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
```

#### Passing undefined functions: anonymous functions

You can pass a function as an argument without first defining the passed function. Functions that are not named are appropriately known as **anonymous functions**.

```{r}
evaluate(function(x){x+1}, 6)
```

The first argument is a tiny anonymous function that takes one argument `x` and returns `x+1`. We passed the number 6 into this function so the entire expression evaluates to 7.

| Try using evaluate() along with an anonymous function to return the first element of the vector c(8,
| 4, 0). Your anonymous function should only take one argument which should be a variable `x`.

```{r}
evaluate(
    function(x){x[1]},
    c(8, 4, 0)
)

```

| Now try using evaluate() along with an anonymous function to return the last element of the vector
| c(8, 4, 0). Your anonymous function should only take one argument which should be a variable `x`.

```{r}
evaluate(
    function(x){x[length(x)]},
    c(8, 4, 0)
)

```

```{r}
?paste
```

#### Ellipsis argument

paste() uses the ellipsis argument. The ellipsis allows to pass an indefinite number of arguments. Typically, the ellipsis goes last in a function. However, paste() uses the ellipsis first and relies on default arguments. Arguments either need to be designated specically or use the default value.

```{r}
paste("Programming", "is", "fun!")
```

Placing the ellipsis first only works if other arguments have a default.

For functions where the ellipsis is last and some arguments are without a default value, R will assign the first variable to the first argument, the second to the second... and so on until it reaches the ellipsis.

***N.B. All arguments after an ellipses must have default values.***

```{r}
input <- c(10, 15) # 30

ellip1 <- function(arg1, arg2, ...) {
    res <- sum(arg1, arg2, ...)
    cat(paste("Result 1: ", res, "\n"))
}

ellip2 <- function(arg1, arg2 = 2, ...) {
    res <- sum(arg1, arg2, ...)
    cat(paste("Result 1: ", res, "\n"))
}

ellip3 <- function(..., arg1 = 2, arg2 = 3) {
    res <- sum(arg1, arg2, ...)
    cat(paste("Result 1: ", res, "\n"))
}

```

```{r}
ellip1(1, 4, input) # took 1 as arg1, 4 as arg2, input as ellipsis

ellip2(5, input) # took 5 as arg1, input as arg2, nothing as ellipsis

ellip3(1, 4, 10, input) # took 1 as arg1, 4 as arg2, rest as ellipsis
ellip3(1, 10, 4, input) # took 1 as arg1, 4 as arg2, rest as ellipsis


```

| Telegrams used to be peppered with the words START and STOP in order to
| demarcate the beginning and end of sentences. Write a function below called
| telegram that formats sentences for telegrams.
| For example the expression `telegram("Good", "morning")` should evaluate to:
| "START Good morning STOP"

```{r}
telegram <- function(...){
  paste("START", ..., "STOP")
}

telegram("Good", "morning")

```

```{r}
telegram("Pierre", "in da", "city!")
```

##### Unpacking arguments from the ellipsis

Madlib function \| Have you ever played Mad Libs before? The function below will construct a \| sentence from parts of speech that you provide as arguments. We'll write most \| of the function, but you'll need to unpack the appropriate arguments from the \| ellipses.

Arguments are fist captured inside a list:

```{r}
mad_libs <- function(...){
  args <- list(...)
  
  place <- args[["place"]]
  adjective <- args[["adjective"]]
  noun <- args[["noun"]]
  
  # Don't modify any code below this comment.
  # Notice the variables you'll need to create in order for the code below to
  # be functional!
  paste("News from", place, "today where", adjective, "students took to the streets in protest of the new", noun, "being installed on campus.")
}
```

Though we are passing arguments to the ellipsis, those arguments can be named and selected with their name:

```{r}
mad_libs("Toronto", "duck", "girly")
```

Here paste won't pass the arguments because the subsetting returned nothing.

```{r}
mad_libs(place = "Toronto", noun = "duck", adjective = "girly")

```

We named the arguments and the arguments were stored as a list with named elements. The order does not matter because we named each argument.

### Binary operators

Binary operators take arguments on the left and right side (e.g. +, -, /, \*, or the pipe \|\> ). They expect a lhs (left-hand side) and rhs (right-hand side) expression.

Designing binary operators is easy. When evaluating an expression, R will break down the expression into small fragments. The function should be designed to handle the fragments. Custom operators are named as quoted strings between % %.

| User-defined binary operators have the following syntax:
|      %\[whatever\]%
| where \[whatever\] represents any valid variable name.

| Let's say I wanted to define a binary operator that multiplied two numbers and
| then added one to the product. An implementation of that operator is below:

```{r}
"%mult_add_one%" <- function(left, right){ 

    #Notice the quotation marks!
    left * right + 1

}

1 %mult_add_one% 2
```

The function should be named as a character string instead of a variable.

```{r}
# %binary_sum_broken% <- function(left, right) {
#     left + right
# }
# 
# 1 binary_sum_broken 2 


```

```{r}
"%binary_sum%" <- function(left, right) {
    left + right
}

1 %binary_sum% 2 

```

```{r}
"%+>%" <- function(person, food) {
    paste(person, "eats", food)
}

"Pierre" %+>% "Apple" 
```

```{r}
"%p%" <- function(left, right){ # Remember to add arguments!
  paste(left, right)
}

```

```{r}
"I" %p% "love" %p% "R!"

```

