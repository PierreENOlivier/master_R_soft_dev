---
title: "Module 1 - Functions"
author: "Pierre Olivier"
format: html
editor: visual
---

# Advanced R - Module 1 - Functions

## Control Structures & logics

### Overview

Commonly used control structures are

1.  if and else: testing a condition and acting on it
2.  for: execute a loop a fixed number of times
3.  break: break the execution of a loop
4.  next: skip an iteration of a loop

### if-statement

#### Single if

```         
if(<condition>) {
      ## do something
}
      ## Continue with rest of code
```

Activates if the condition is TRUE

#### if-else

A condition or the other (not that condition) One is TRUE, the other is FALSE.

```         
if(<condition>) {
      ## do something
}
else {
      ## do something else
}
```

#### if elif

For deeper control, you can include a series of elif statements:

```         
if(<condition1>) {
      ## do something
} else if(<condition2>) {
      ## do something different
} else {
      ## do something different
}
```

Example:

```{r}
## Generate a uniform random number
x <- runif(1, 0, 10)
if(x > 3) {
        y <- 10
} else {
        y <- 0
}
```

The else is not necessary, you could also use if() to cover all alternate conditions.

### for() loops

The main type of loops that can pretty much do anything a loop would be used for.

for() loops take an iterator variable and assign it successive values from a variable.

```{r}
numbers <- rnorm(10)
for(i in 1:10) {
        print(numbers[i])
}
```

```{r}
x <- c("a", "b", "c", "d")

for(i in 1:4) {
        ## Print out each element of 'x'
        print(x[i])  
}
```

We can either use a vector or build a sequence with seq() or seq_along(): N.B. seq_along replaces seq(1, length(x), by = 1)

```{r}
## Generate a sequence based on length of 'x'
for(i in seq_along(x)) {
    print(i)
    print(x[i])
}

```

It is not necessary to use an index-type variable:

```{r}
for(letter in x) {
        print(letter)
}

for(i in 1:4) print(x[i])

```

### Nested for() loops

To index at several levels or in different variables, loops can be nested:

```{r}
x <- matrix(1:6, 2, 3)

for(i in seq_len(nrow(x))) {
        for(j in seq_len(ncol(x))) {
                print(x[i, j])
        }   
}

```

Nested for loops are used for scanning through multidimensional or hierarchical data structures (e.g. matrices, lists). For instance, to go through rows and columns. However, it is unusually to use more than 2-3 nested loops as it makes the code harder to understand. Best is to break the loop into smaller functions.

#### Functions to create sequences for loops

seq() allows to pass a `from`, `to`, and `by` arguments to create specific sequences with an interval. The `length.out` argument is used instead of `by` and will calculate the interval based on the desired length for the sequence. seq() is a generic function that dispatches solely based on the first argument.

seq.int() returns a sequence of integers.

seq_along() builds a sequence from 1, by 1, up to the length of the object passed as argument. seq_len() takes a number as argument and builds a sequence from 1, by 1, up to that number.

```{r}
y <- sample(1:100, size = sample(20:50, size = 1), replace = FALSE)
y <- sort(y)

seq(from = 1.1, to = 10.1, by = 1)
seq(from = 1.0, to = 10.0, length.out = 19)
seq(from = 1, to = 10, by = 0.5)

seq.int(from = 1.1, to = 10.1, by = 1)

length(y)
seq_along(y)

seq_len(10)

```

### next & break

`next` skips an iteration `break` breaks the loop. If included in a nested for loop, it breaks that specific loop at that level and goes back to the higher levels. N.B. next and break do not need parenthesis as they are special functions that only transfers the loop control.

```{r}
for(i in 1:30) {
    
        if(i <= 20) {
                ## Skip the first 20 iterations
                
                next
            
        }
        print(i)
}
```

```{r}
for(i in 1:10) {
      print(i)

      if(i > 5) {
              ## Stop loop after 5 iterations
              message("Stop")
              break  
      }
    message("Processed")
}
```

```{r}
for(i in seq_len(5)) {
    for(j in seq_len(5)) {
        print(paste0(i, ".", j))
        if(j > 2) break
    }
}

```

### while() and repeat()

while() loops continue as long as the condition is true.

`repeat` takes no arguments works in combination with a break statement. It repeats indefinitely until it hits a break statement.

```{r}
flag <- TRUE
result <- 0
while(flag) {
    print(result)
    result <- result + 1
    if(result > 5) flag <- FALSE
} 
```

```{r}
x <- 0
repeat {
    print(x)
    x <- x + 1
    if (x > 5) break
}
```

### Summary

Control structures are primarily used to write programs. Within the code itself, as part of an analysis, one should prefer the `apply()` family or `map()` as they are built in `C` and run much faster.

## Functions

### Overview

What to consider: 1. Each function is built for a specific goal and **encapsulates** a set of logics and sequence of expressions to achieve that goal. A single function does "one thing well". It is better to break complicated logics into smaller functions. **When writing a function, it's important to ask yourself what do I want to encapsulate?**

2.  Arguments are there for **users** to customize the use of the function for their own needs. **When writing any function it's important to ask what will the user want to modify in this function?** Ultimately, the answer to this question will lead to the function's **interface**. The interface is where the user defines the inputs.

function(<interface of the function>)

### Code

Scripts and (interactive) code are designed to accomplish a single task. That task might be repeated but the end goal is definite (e.g. take some input data from last year and compile a report for last year). The repetition is simply an iteration of the same task.

| This code is designed to accomplish a single task---whatever it is that
| we are trying to do right now. For example, consider the following code that
| operates on download logs published by RStudio from their mirror of the
| Comprehensive R Archive Network (CRAN). This code counts the number of times
| the filehash package was downloaded on July 20, 2016.

```{r}
library(readr)
library(dplyr)

## Download data from RStudio (if we haven't already)
if(!file.exists("data/2016-07-20.csv.gz")) {
        download.file("http://cran-logs.rstudio.com/2016/2016-07-20.csv.gz", 
                      "data/2016-07-20.csv.gz")
}
cran <- read_csv("data/2016-07-20.csv.gz", col_types = "ccicccccci")
cran %>% filter(package == "filehash") %>% nrow
# [1] 179

```

This code is finite for that day (2016-07-20) and cannot be repeated or will lead to the same result.

On the other hand, functions are designed to be reused. From the code above, some parts can be modified or expanded on to make it repeatable or transferrable to other similar tasks: - the date - the package of interest

Once we have identified which parts of the code might change, we can build a function and its interface. We can specify a date and a package name as arguments, and have the function returns the number of downloads on that day for that package.

### Function interface

Let's decompose the function.

The function takes 2 arguments: - pkgname: a package name as a character string - date: a date as a character string

The function's logic: - extract the year from the date to insert the year as a folder category in the url - build the source url where to download from - build the destination path for the download - read in the file from the destination - filter the data - calculate the number of downloads

```{r}
library(dplyr)
library(readr)

## pkgname: package name (character)
## date: YYYY-MM-DD format (character)
num_download <- function(pkgname, date) {
        ## Construct web URL
        year <- substr(date, 1, 4)
        src <- sprintf("http://cran-logs.rstudio.com/%s/%s.csv.gz",
                       year, date)

        message(paste("Downloading from:", src, sep=" "))
        ## Construct path for storing local file
        dest <- file.path("data", basename(src))
        
        
        if(!dir.exists("data")) dir.create("data", recursive = T)

        message(paste("Saving at:", dest, sep=" "))
        ## Don't download if the file is already there!
        if(!file.exists(dest))
                download.file(src, dest, quiet = TRUE)

        cran <- read_csv(dest, col_types = "ccicccccci", progress = FALSE)
        cran %>% filter(package == pkgname) %>% nrow
}
```

```{r}
num_download("filehash", "2016-07-20")
```

#### N.B. Some cool functions

sprintf() formats strings using the C-style formatting, similar to f-string formatting. basename() reads the path from right to left and keep that last file or directory up to the previous separator. dirname() is complementary to basename and keeps everything up to the last directory/file, excluded.

```{r}
path_file <- "Users/po/R/data/myfile.R"
url <- sprintf("https://mywebsite/images/%s/%s/15", 2016, "January") # %s stands for string
basename(path_file)
dirname(path_file)

basename(url)

```

## Swirl sessions

```{r}
# install.packages("swirl")
library(swirl)
install_course("Advanced R Programming")
```

To get started

```{r}
swirl()
# skip()
# play() + nxt()
# bye()
# main()
# info()
# 
```

[Swirl Token for Advanced R Prog.](https://www.coursera.org/learn/advanced-r/programming/5TmEw/swirl-lesson)

### Swirl - Functions

Reusable piece of code

```{r}
Sys.Date()
```

Most functions return a value based on the environment. Some functions manipulate an input (i.e. argument) and return an output. Pass the argument to the function:

```{r}
mean(c(2, 4, 5))
```

Arguments are variables that the function operates on.

Exercise: Modify the script and type submit()

```{r}
boring_function <- function(x) {
  x
}

```

```{r}
boring_function('My first function!')
```

In R: 1. Everything that exists is an object. 2. Everything that happens is a function call.

See the source code:

```{r}
boring_function
```

```{r}
my_mean <- function(my_vector) {
  sum_vector <- sum(my_vector)
  sum_vector / length(my_vector)
}


```

```{r}
my_mean(c(4, 5, 10))
```

#### Arguments

Default arguments:

```{r}
increment <- function(number, by = 1){
    number + by
}

```

```{r}
remainder <- function(num, divisor = 2) {
    num %% divisor

}

remainder(5)
```

When not designated specifically, arguments are matched by order. To make sure, designate by their name.

```{r}
remainder(11, 5)
remainder(divisor = 11, num = 5)

```

R can also partially match arguments.

```{r}
remainder(4, div = 2)

```

A word of warning: in general you want to make your code as easy to understand as possible. Switching around the orders of arguments by specifying their names or only using partial argument names can be confusing, so use these features with caution!

You can view a function's arguments:

```{r}
args(remainder)

```

#### Passing functions to a function

We just passed a function as an argument. Functions are objects that can be passed.

```{r}
add_two_numbers <- function(num1, num2){
   num1 + num2
}

multiply_two_numbers <- function(num1, num2){
    num1 * num2
}

some_function <- function(func){
   func(2, 4)
}

```

```{r}
some_function(add_two_numbers)
```

Finish the function definition below so that if a function is passed into the "func" argument and some data (like a vector) is passed into the dat argument the evaluate() function will return the result of dat being passed as an argument to func.

evaluate \<- function(func, dat){ \# }

```{r}
evaluate <- function(func, dat){
    func(dat)
}

```

```{r}
evaluate(sum, c(2, 4, 6)) # 12
evaluate(median, c(7, 40, 9)) # 9
evaluate(floor, 11.1) # 11

```

```{r}

evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
```

#### Passing undefined functions: anonymous functions

You can pass a function as an argument without first defining the passed function. Functions that are not named are appropriately known as **anonymous functions**.

```{r}
evaluate(function(x){x+1}, 6)
```

The first argument is a tiny anonymous function that takes one argument `x` and returns `x+1`. We passed the number 6 into this function so the entire expression evaluates to 7.

| Try using evaluate() along with an anonymous function to return the first element of the vector c(8,
| 4, 0). Your anonymous function should only take one argument which should be a variable `x`.

```{r}
evaluate(
    function(x){x[1]},
    c(8, 4, 0)
)

```

| Now try using evaluate() along with an anonymous function to return the last element of the vector
| c(8, 4, 0). Your anonymous function should only take one argument which should be a variable `x`.

```{r}
evaluate(
    function(x){x[length(x)]},
    c(8, 4, 0)
)

```

```{r}
?paste
```

#### Ellipsis argument

paste() uses the ellipsis argument. The ellipsis allows to pass an indefinite number of arguments. Typically, the ellipsis goes last in a function. However, paste() uses the ellipsis first and relies on default arguments. Arguments either need to be designated specically or use the default value.

```{r}
paste("Programming", "is", "fun!")
```

Placing the ellipsis first only works if other arguments have a default.

For functions where the ellipsis is last and some arguments are without a default value, R will assign the first variable to the first argument, the second to the second... and so on until it reaches the ellipsis.

***N.B. All arguments after an ellipses must have default values.***

```{r}
input <- c(10, 15) # 30

ellip1 <- function(arg1, arg2, ...) {
    res <- sum(arg1, arg2, ...)
    cat(paste("Result 1: ", res, "\n"))
}

ellip2 <- function(arg1, arg2 = 2, ...) {
    res <- sum(arg1, arg2, ...)
    cat(paste("Result 1: ", res, "\n"))
}

ellip3 <- function(..., arg1 = 2, arg2 = 3) {
    res <- sum(arg1, arg2, ...)
    cat(paste("Result 1: ", res, "\n"))
}

```

```{r}
ellip1(1, 4, input) # took 1 as arg1, 4 as arg2, input as ellipsis

ellip2(5, input) # took 5 as arg1, input as arg2, nothing as ellipsis

ellip3(1, 4, 10, input) # took 1 as arg1, 4 as arg2, rest as ellipsis
ellip3(1, 10, 4, input) # took 1 as arg1, 4 as arg2, rest as ellipsis


```

| Telegrams used to be peppered with the words START and STOP in order to
| demarcate the beginning and end of sentences. Write a function below called
| telegram that formats sentences for telegrams.
| For example the expression `telegram("Good", "morning")` should evaluate to:
| "START Good morning STOP"

```{r}
telegram <- function(...){
  paste("START", ..., "STOP")
}

telegram("Good", "morning")

```

```{r}
telegram("Pierre", "in da", "city!")
```

##### Unpacking arguments from the ellipsis

Madlib function \| Have you ever played Mad Libs before? The function below will construct a \| sentence from parts of speech that you provide as arguments. We'll write most \| of the function, but you'll need to unpack the appropriate arguments from the \| ellipses.

Arguments are fist captured inside a list:

```{r}
mad_libs <- function(...){
  args <- list(...)
  
  place <- args[["place"]]
  adjective <- args[["adjective"]]
  noun <- args[["noun"]]
  
  # Don't modify any code below this comment.
  # Notice the variables you'll need to create in order for the code below to
  # be functional!
  paste("News from", place, "today where", adjective, "students took to the streets in protest of the new", noun, "being installed on campus.")
}
```

Though we are passing arguments to the ellipsis, those arguments can be named and selected with their name:

```{r}
mad_libs("Toronto", "duck", "girly")
```

Here paste won't pass the arguments because the subsetting returned nothing.

```{r}
mad_libs(place = "Toronto", noun = "duck", adjective = "girly")

```

We named the arguments and the arguments were stored as a list with named elements. The order does not matter because we named each argument.

### Binary operators

Binary operators take arguments on the left and right side (e.g. +, -, /, \*, or the pipe \|\> ). They expect a lhs (left-hand side) and rhs (right-hand side) expression.

Designing binary operators is easy. When evaluating an expression, R will break down the expression into small fragments. The function should be designed to handle the fragments. Custom operators are named as quoted strings between % %.

| User-defined binary operators have the following syntax:
|      %\[whatever\]%
| where \[whatever\] represents any valid variable name.

| Let's say I wanted to define a binary operator that multiplied two numbers and
| then added one to the product. An implementation of that operator is below:

```{r}
"%mult_add_one%" <- function(left, right){ 

    #Notice the quotation marks!
    left * right + 1

}

1 %mult_add_one% 2
```

The function should be named as a character string instead of a variable.

```{r}
# %binary_sum_broken% <- function(left, right) {
#     left + right
# }
# 
# 1 binary_sum_broken 2 


```

```{r}
"%binary_sum%" <- function(left, right) {
    left + right
}

1 %binary_sum% 2 

```

```{r}
"%+>%" <- function(person, food) {
    paste(person, "eats", food)
}

"Pierre" %+>% "Apple" 
```

Swirl exercises

```{r}
"%p%" <- function(left, right){ # Remember to add arguments!
  paste(left, right)
}

```

```{r}
"I" %p% "love" %p% "R!"

```
